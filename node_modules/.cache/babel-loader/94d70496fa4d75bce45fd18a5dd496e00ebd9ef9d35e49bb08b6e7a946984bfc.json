{"ast":null,"code":"import{useEffect,useState}from\"react\";import{useNavigate,useParams}from\"react-router-dom\";import axios from\"axios\";import AdminHeader from\"../../components/AdminHeader\";import AdminButton from\"../../components/AdminButton\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UserEdit=()=>{const[data,setData]=useState({userId:\"\",passwd:\"\",userName:\"\",userEmail:\"\",is_admin:\"\"});// 수정선택한 사용자 정보\nconst[user,setUser]=useState([]);//전체 사용자 정보\nconst[isCheck,setIsCheck]=useState(false);// 중복 확인됐는지 확인하는 변수\nconst token=sessionStorage.getItem(\"token\");const navigate=useNavigate();useEffect(()=>{setIsCheck(false);},[data.userId]);//ischeck 초기화 \nconst handleCancel=()=>{navigate(-1);};//수정 취소시 함수\nconst handleDuplication=()=>{const found=user.find(it=>it.userId===data.userId);if(id==data.userId){alert(\"기존 아이디 입니다.\");setIsCheck(true);}else if(found){alert(\"중복된 아이디입니다\");setIsCheck(false);}else{alert(\"사용가능한 아이디 입니다\");setIsCheck(true);}};//중복확인 처리 함수\nconst handleEdit=async()=>{axios.put(\"/admin/users/update\",{userId:data.userId,passwd:data.passwd,userName:data.userName,userEmail:data.userEmail,is_admin:data.is_admin,basic_userId:id},{headers:{'Authorization':token}}).then(response=>{alert(\"정보가 수정되었습니다.\");}).catch(error=>{if(error.response.status===500){alert(error.response.data.message);}else if(error.response.status===401||error.response.status===403){alert(error.response.data.message);sessionStorage.removeItem(\"token\");navigate(\"/admin/login\");}});navigate(\"/admin/user/view\");};// axios 이용하여 수정처리하는 함수\nconst handleSubmit=()=>{if(id==data.userId){handleEdit();}else if(isCheck==false){alert(\"중복 확인을 완료해주세요\");}else{handleEdit();}};//아이디가 바뀌면 중복확인이 됬는지 검사하고 수정처리하기로 넘겨주는 함수 \nconst{id}=useParams();useEffect(()=>{fetchuserData();},[]);//가져온 사용자데이터 실행\nconst fetchuserData=async()=>{try{const response=await axios.get(\"/admin/users/listView\",{headers:{'Authorization':token}});setUser(response.data.users);const userData=response.data.users.find(item=>item.userId===id);setData({userId:userData.userId,passwd:userData.passwd,userName:userData.userName,userEmail:userData.userEmail,is_admin:userData.is_admin});}catch(error){if(error.response.status===500){alert(error.response.data.message);}else if(error.response.status===401||error.response.status===403){alert(error.response.data.message);sessionStorage.removeItem(\"token\");navigate(\"/admin/login\");}}};// api로 사용자 전체 정보 받아오는 함수\nconst handleChange=event=>{const{name,value}=event.target;setData(prevState=>({...prevState,[name]:value}));};//정보 수정 입력하면 바뀌는 함수\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"AdminEntire\",children:[/*#__PURE__*/_jsx(AdminHeader,{}),/*#__PURE__*/_jsx(\"div\",{className:\"UserEditText\",children:\"\\uC0AC\\uC6A9\\uC790 \\uC815\\uBCF4 \\uC218\\uC815\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"UserEdit\",children:[/*#__PURE__*/_jsx(\"div\",{children:\"\\uC544\\uC774\\uB514\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"UserEditId\",children:[/*#__PURE__*/_jsx(\"input\",{name:\"userId\",value:data.userId,onChange:handleChange,className:\"UserEditInput\"}),/*#__PURE__*/_jsx(AdminButton,{text:\"\\uC911\\uBCF5 \\uD655\\uC778\",className:\"Duplication\",onClick:handleDuplication})]}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uBE44\\uBC00\\uBC88\\uD638\"}),/*#__PURE__*/_jsx(\"input\",{name:\"passwd\",value:data.passwd,onChange:handleChange,className:\"UserEditInput\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uB2C9\\uB124\\uC784\"}),/*#__PURE__*/_jsx(\"input\",{name:\"userName\",value:data.userName,onChange:handleChange,className:\"UserEditInput\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uC774\\uBA54\\uC77C\"}),/*#__PURE__*/_jsx(\"input\",{name:\"userEmail\",value:data.userEmail,onChange:handleChange,className:\"UserEditInput\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uC2DD\\uBCC4\\uCF54\\uB4DC(0 \\uC0AC\\uC6A9\\uC790 1 \\uAD00\\uB9AC\\uC790)\"}),/*#__PURE__*/_jsx(\"input\",{name:\"is_admin\",value:data.is_admin,onChange:handleChange,className:\"UserEditInput\"}),\"  \"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"UserEditButton\",children:[\" \",/*#__PURE__*/_jsx(AdminButton,{text:\"\\uCDE8\\uC18C\",onClick:handleCancel,className:\"UserEditButtonDetail1\"}),/*#__PURE__*/_jsx(AdminButton,{text:\"\\uC81C\\uCD9C\",className:\"UserEditButtonDetail2\",onClick:handleSubmit})]})]});};export default UserEdit;","map":{"version":3,"names":["useEffect","useState","useNavigate","useParams","axios","AdminHeader","AdminButton","jsx","_jsx","jsxs","_jsxs","UserEdit","data","setData","userId","passwd","userName","userEmail","is_admin","user","setUser","isCheck","setIsCheck","token","sessionStorage","getItem","navigate","handleCancel","handleDuplication","found","find","it","id","alert","handleEdit","put","basic_userId","headers","then","response","catch","error","status","message","removeItem","handleSubmit","fetchuserData","get","users","userData","item","handleChange","event","name","value","target","prevState","className","children","onChange","text","onClick"],"sources":["C:/Users/100li/Desktop/admin/src/page/User/UserEdit.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport AdminHeader from \"../../components/AdminHeader\";\r\nimport AdminButton from \"../../components/AdminButton\";\r\nconst UserEdit=()=>{\r\n    const [data,setData]=useState({\r\n      userId:\"\",\r\n      passwd:\"\",\r\n      userName:\"\",\r\n      userEmail:\"\",\r\n      is_admin:\"\",\r\n    });  // 수정선택한 사용자 정보\r\n    const [user,setUser]=useState([]);  //전체 사용자 정보\r\n    const [isCheck,setIsCheck]=useState(false); // 중복 확인됐는지 확인하는 변수\r\n    const token=sessionStorage.getItem(\"token\")\r\n    const navigate=useNavigate();  \r\n    useEffect(()=>{\r\n     setIsCheck(false);\r\n    },[data.userId])  //ischeck 초기화 \r\n\r\n    const handleCancel=()=>{\r\n      navigate(-1);\r\n    }  //수정 취소시 함수\r\n\r\n    const handleDuplication=()=>{\r\n      const found = user.find(it => it.userId === data.userId);\r\n      if(id==data.userId){\r\n        alert(\"기존 아이디 입니다.\");\r\n        setIsCheck(true);\r\n      }\r\n     else if(found){ \r\n      alert(\"중복된 아이디입니다\");\r\n      setIsCheck(false);\r\n     }\r\n     else {\r\n      alert(\"사용가능한 아이디 입니다\");\r\n      setIsCheck(true);\r\n     }\r\n    }; //중복확인 처리 함수\r\n\r\n    const handleEdit= async ()=>{\r\n      axios.put(`/admin/users/update`, \r\n       {\r\n        userId:data.userId,\r\n        passwd:data.passwd,\r\n        userName:data.userName,\r\n        userEmail:data.userEmail,\r\n        is_admin:data.is_admin,\r\n        basic_userId:id \r\n       },\r\n       {\r\n       headers:{\r\n        'Authorization':token\r\n      }\r\n    }\r\n       )\r\n     .then(response => {        \r\n         alert(\"정보가 수정되었습니다.\");\r\n     })\r\n     .catch(error => {\r\n        if(error.response.status===500){\r\n          alert(error.response.data.message);\r\n        }\r\n        else if(error.response.status===401 || error.response.status===403){\r\n          alert(error.response.data.message);\r\n          sessionStorage.removeItem(\"token\");\r\n          navigate(\"/admin/login\");\r\n         }\r\n     });\r\n     navigate(\"/admin/user/view\");\r\n    }  // axios 이용하여 수정처리하는 함수\r\n\r\n    const handleSubmit=()=>{\r\n      if(id==data.userId){\r\n       handleEdit();\r\n   }\r\n      else if(isCheck==false){\r\n        alert(\"중복 확인을 완료해주세요\");\r\n      }\r\n    else {\r\n      handleEdit();\r\n    }\r\n    } //아이디가 바뀌면 중복확인이 됬는지 검사하고 수정처리하기로 넘겨주는 함수 \r\n\r\n    const {id}=useParams();\r\n\r\n\r\n    useEffect(() => {\r\n      fetchuserData();\r\n   }, []); //가져온 사용자데이터 실행\r\n\r\n   \r\n     const fetchuserData = async () => {     \r\n       try {\r\n           const response = await axios.get(`/admin/users/listView`,{\r\n            headers:{\r\n              'Authorization':token\r\n            }\r\n           });\r\n           setUser(response.data.users);\r\n           const userData = response.data.users.find(item => item.userId === id);\r\n           setData({\r\n            userId: userData.userId,\r\n            passwd: userData.passwd,\r\n            userName: userData.userName,\r\n            userEmail: userData.userEmail,\r\n            is_admin: userData.is_admin\r\n        });\r\n       }catch (error) {\r\n        if(error.response.status===500){\r\n         alert(error.response.data.message);\r\n        }\r\n        else if(error.response.status===401 || error.response.status===403){\r\n          alert(error.response.data.message);\r\n          sessionStorage.removeItem(\"token\");\r\n          navigate(\"/admin/login\");\r\n         }\r\n       }\r\n   };  // api로 사용자 전체 정보 받아오는 함수\r\n\r\n   const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setData(prevState => ({\r\n        ...prevState,\r\n        [name]: value\r\n    }));\r\n}; //정보 수정 입력하면 바뀌는 함수\r\n\r\nreturn (\r\n    <div className=\"AdminEntire\">\r\n       <AdminHeader/>\r\n       \r\n        <div className=\"UserEditText\">사용자 정보 수정</div>\r\n        <div className=\"UserEdit\">\r\n          <div>아이디</div>\r\n      <div className=\"UserEditId\"><input name=\"userId\" value={data.userId} onChange={handleChange}  className=\"UserEditInput\"/>\r\n      <AdminButton text=\"중복 확인\" className=\"Duplication\" onClick={handleDuplication}/></div>  \r\n        <div>비밀번호</div>\r\n        <input name=\"passwd\" value={data.passwd} onChange={handleChange} className=\"UserEditInput\" />\r\n        <div>닉네임</div>\r\n        <input name=\"userName\" value={data.userName} onChange={handleChange}  className=\"UserEditInput\"/>\r\n        <div>이메일</div>\r\n        <input name=\"userEmail\" value={data.userEmail} onChange={handleChange} className=\"UserEditInput\" /> \r\n        <div>식별코드(0 사용자 1 관리자)</div>\r\n        <input name=\"is_admin\" value={data.is_admin} onChange={handleChange} className=\"UserEditInput\" />  </div>\r\n       <div className=\"UserEditButton\"> <AdminButton text=\"취소\" onClick={handleCancel} className=\"UserEditButtonDetail1\"/>\r\n        <AdminButton text=\"제출\" className=\"UserEditButtonDetail2\" onClick={handleSubmit}/></div>\r\n      \r\n    </div>\r\n);\r\n\r\n};\r\nexport default UserEdit;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}